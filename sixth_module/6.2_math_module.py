# Модуль math – один из наиважнейших в Python. Этот модуль предоставляет обширный функционал для проведения вычислений с вещественными числами (числами с плавающей точкой).
# import math
# from math import *
#
# num1 = math.sqrt(2)  # вычисление корня квадратного из двух
# num2 = math.ceil(3.8)  # округление числа вверх
# num3 = math.floor(3.8)  # округление числа вниз
# print(num1)
# print(num2)
# print(num3)
#
# num1 = sqrt(2)  # вычисление корня квадратного из двух
# num2 = ceil(3.8)  # округление числа вверх
# num3 = floor(3.8)  # округление числа вниз
# print(num1)
# print(num2)
# print(num3)
# int()	Округляет число в сторону нуля
# round(x)	Округляет число x до ближайшего целого. Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
# round(x, n)	Округляет число x до n знаков после точки
# floor(x)	Округляет число x вниз («пол»)
# ceil(x)	Округляет число x вверх («потолок»)
# abs(x)	Модуль числа x (абсолютная величина)
# Корни, логарифмы, степени и факториал
# sqrt(x)	Квадратный корень числа x
# pow(x, n)	Возведение числа x в степень n
# log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
# log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
# log(x, b)	Логарифм числа x по основанию b
# factorial(n)	Факториал натурального числа n
# Тригонометрия
# degrees(x)	Преобразует угол x, заданный в радианах, в градусы
# radians(x)	Преобразует угол x, заданный в градусах, в радианы
# cos(x)	Косинус угла x, задаваемого в радианах
# sin(x)	Синус угла x, задаваемого в радианах
# tan(x)	Тангенс угла x, задаваемого в радианах
# acos(x)	Возвращает угол в радианах от 00 до \piπ, cos которого равен x

# Для извлечения квадратного корня можно воспользоваться кодом n ** 0.5, вместо math.sqrt(n)

# Примечание 1. Все функции модуля math возращают значение, которое можно вывести на экран, присвоить другой переменной или использовать в математическом выражении.
#
# Примечание 2. Для использования функций int(), float(), abs(), min(), max(), round() подключать модуль math нет необходимости. Это так называемые встроенные функции.
#
# Примечание 3. Вызов функций pow(x, n) можно заменить использованием оператора возведения в степень: x**n

# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.
# import math
# x1 = float(input())
# y1 = float(input())
# x2 = float(input())
# y2 = float(input())
# p = math.sqrt(((x1-x2) ** 2) + ((y1-y2) ** 2))
# print(p)

# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R
# from math import *
#
# R = float(input())
# S = pi * (R ** 2)
# C = 2 * pi * R
# print(S)
# print(C)

# В математике выделяют следующие средние значения:
# Формат входных данных
# На вход программе подается два вещественных числа aa и bb​, каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.

# from math import *
# a = float(input())
# b = float(input())
# Sa = (a + b) / 2
# Sg = sqrt(a * b)
# Sga = (2 * a * b) / (a + b)
# Sk = sqrt(((a ** 2) + (b ** 2))/2)
# print(Sa)
# print(Sg)
# print(Sga)
# print(Sk)

# Напишите программу, вычисляющую значение тригонометрического выражения
# по заданному числу градусов x.
# Формат входных данных
# На вход программе подается одно вещественное число xx измеряемое в градусах​.
# Формат выходных данных
# Программа должна вывести одно число – значение тригонометрического выражения.
# Примечание 1. Тригонометрические функции принимают аргумент в радианах. Чтобы перевести градусы в радианы, воспользуйтесь формулой
# from math import *
# x = float(input())
# r = (x * pi) / 180
# v = sin(r) + cos(r) + (tan(r)) ** 2
# print(v)

# На вход программе подается одно вещественное число x.
# Формат выходных данных
# Программа должна вывести одно число – значение указанного выражения.
# from math import *
# x = float(input())
# xc = ceil(x)   # округление числа вверх
# xf = floor(x)  # округление числа вниз
# xs = xc + xf
# print(xs)

# Даны три вещественных числа aa, bb, cc. Напишите программу, которая находит вещественные корни квадратного уравнения
# Формат выходных данных
# Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.
# Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.
# from math import *
# a = float(input())
# b = float(input())
# c = float(input())
# D = (b ** 2) - (4 * a * c)
# if D < 0:
#     print('Нет корней')
# elif D == 0:
#     x = -b / (2 * a)
#     print(x)
# elif D > 0:
#     x1 = ((-b + sqrt(D))/(2 * a))
#     x2 = ((-b - sqrt(D))/(2 * a))
#     print(min(x1, x2))
#     print(max(x1, x2))

# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между смежными сторонами. Площадь
# правильного многоугольника с длиной стороны aa и количеством сторон nn вычисляется по формуле:
# Даны два числа: натуральное число nn и вещественное число aa. Напишите программу, которая находит площадь указанного правильного многоугольника.
# Формат входных данных
# На вход программе подается два числа nn и aa, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести вещественное число – площадь многоугольника.
from math import *
n = int(input())
a = float(input())
S = (n * (a ** 2)) / (4 * tan(pi/n))
print(S)
