'''Поиск и замена
Методы поиска и замены строк внутри других строк.

Каждый метод в этой группе поддерживает необязательные аргументы <start> и <end>. Как и в строковых срезах действие
метода ограничено частью исходной строки, начинающейся с позиции символа <start> и продолжающейся вплоть до позиции
 символа <end>, но не включающей ее. Если параметр <start> указан, а параметр <end> нет, то метод применяется к части
  исходной строки от <start> до конца строки. Если параметры не заданы, то подразумевается,
   что <start> = 0 , <end> = len(s).
Метод count()
Метод count(<sub>, <start>, <end>) считает количество непересекающихся вхождений подстроки <sub> в исходную строку s.
Результатом выполнения следующего кода:'''
# s = 'foo goo moo'
# print(s.count('oo'))
# print(s.count('oo', 0, 8))  # подсчет с 0 по 7 символ

'''Метод startswith()
Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>. 
Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.

Результатом выполнения следующего кода:'''
s = 'foobar'
# print(s.startswith('foo'))
# print(s.startswith('baz'))
'''Метод endswith()
Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>.
 Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.
Результатом выполнения следующего кода:'''
s = 'foobar'
# print(s.endswith('bar'))
# print(s.endswith('baz'))
'''Методы find(), rfind()
Метод find(<sub>, <start>, <end>) находит индекс первого вхождения подстроки <sub> в исходной строке s. 
Если строка s не содержит подстроки <sub>, то метод возвращает значение -1. Мы можем использовать данный метод наравне
 с оператором in для проверки: содержит ли заданная строка некоторую подстроку или нет.
Результатом выполнения следующего кода:'''
# s = 'foo bar foo baz foo qux'
# print(s.find('foo'))
# print(s.find('bar'))
# print(s.find('qu'))
# print(s.find('python'))

'''Метод rfind(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он ищет 
первое вхождение подстроки <sub> начиная с конца строки s.'''

'''Методы index(), rindex()
Метод index(<sub>, <start>, <end>) идентичен методу find(<sub>, <start>, <end>), за тем исключением, что он вызывает 
ошибку  ValueError: substring not found во время выполнения программы, если подстрока <sub> не найдена.

Метод rindex(<sub>, <start>, <end>) идентичен методу index(<sub>, <start>, <end>), за тем исключением, что он ищет 
первое вхождение подстроки <sub> начиная с конца строки s.

Методы find() и rfind() являются более безопасными чем index() и rindex(), так как не приводят к возникновению ошибки 
во время выполнения программы.'''

'''Метод strip()
Метод strip() возвращает копию строки s у которой удалены все пробелы стоящие в начале и конце строки.

Результатом выполнения следующего кода:'''
# s = '     foo bar foo baz foo qux      '
# print(s.strip())
'''Метод lstrip()
Метод lstrip() возвращает копию строки s у которой удалены все пробелы стоящие в начале строки.

Результатом выполнения следующего кода:'''
# s = '     foo bar foo baz foo qux      '
# print(s.lstrip())
'''Метод rstrip()
Метод rstrip() возвращает копию строки s у которой удалены все пробелы стоящие в конце строки.

Результатом выполнения следующего кода:

s = '      foo bar foo baz foo qux      '
print(s.rstrip())
будет:

⎵ ⎵ ⎵ ⎵ ⎵ ⎵foo bar foo baz foo qux
 '''

'''Методы strip(), lstrip(), rstrip() могут принимать на вход опциональный аргумент<chars>. Необязательный 
аргумент <chars>– это строка, которая определяет набор символов для удаления.'''
'''Метод replace()
Метод replace(<old>, <new>) возвращает копию s со всеми вхождениями подстроки <old>, замененными на <new>.

Результатом выполнения следующего кода:

s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault'))
будет:

grault bar grault baz grault qux'''
'''Метод replace() может принимать опциональный третий аргумент <count>,  который определяет количество замен.

Результатом выполнения следующего кода:

s = 'foo bar foo baz foo qux'
print(s.replace('foo', 'grault', 2))
будет:

grault bar grault baz foo qux'''
# s = 'aabbAAccDDaa'
# s = s.lower()
# print(s.count('a'))

# s = 'www.stepik.org'
# print(s.startswith('www'))
# s = 'I learn Python language. Python - awesome!'
# print(s.find('Python'))

# s = '     I learn Python language               '
# print(s.strip())
# s = 'abcdababa'
# print(s.replace('ab', '123'))
'''Количество слов
На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу, 
которая подсчитывает количество слов в ней.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести количество слов.
Примечание 1. Строка текста не содержит пробелов в начале и конце.
Примечание 2. Используйте для решения задачи метод count.
Sample Input 1:
Hello world
Sample Output 1:
2
'''
# s = input()
# print(s.count(' ') + 1)

'''Минутка генетики
На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), 
Т (тимин). Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную 
строку генетического кода.
Формат входных данных 
На вход программе подается строка генетического кода, состоящая из символов А, Г, Ц, Т, а, г, ц, т.
Формат выходных данных
Программа должна вывести сколько гуанина, тимина, цитозина, аденина входит в данную строку генетического кода.
Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.
Sample Input 1:
АааГГЦЦцТТттт
Sample Output 1:
Аденин: 3
Гуанин: 2
Цитозин: 3
Тимин: 5
'''
# s = input()
# s = s.lower()
# countA = 0
# countG = 0
# countC = 0
# countT = 0
# for i in s:
#     if i == 'а':
#         countA += 1
#     elif i == 'г':
#         countG += 1
#     elif i == 'ц':
#         countC += 1
#     elif i == 'т':
#         countT += 1
#
# print('Аденин:', countA)
# print('Гуанин:', countG)
# print('Цитозин:', countC)
# print('Тимин:', countT)

'''Очень странные дела
Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. На приемник ему поступает nn различных 
последовательностей кода Морзе. Декодировав их, он получает последовательности из цифр и строчного латинского алфавита,
 при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. Помогите определить Джиму количество 
 сообщений от Оди.
Формат входных данных
В первой строке подаётся число nn – количество сообщений, в последующих nn строках вводятся строки, содержащие 
латинские строчные буквы и цифры.
Формат выходных данных
Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.
Примечание: Числа 11 необязательно должны быть разделены другими символами, нужно подсчитать вхождение 
последовательности символов "11", т.е. например в строке "111" содержится одна такая последовательность, в то 
время как в "1111" их уже две.
Sample Input:
3
11helpme11jim11
avengers141414atta11ck
k1lg0re11111l
Sample Output:

1'''
# n = int(input())
# count = 0
# for i in range(n):
#     n = input()
#     p = n.count('11')
#     if p >= 3:
#         count += 1
# print(count)

'''Количество цифр
На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести количество цифр в данной строке.'''
# n = input()
# count = 0
# for c in n:
#     if '0' <= c <= '9':
#         count += 1
# print(count)

'''.com or .ru
На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой
 .com или .ru.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.
Sample Input 1:
www.stepik.org
Sample Output 1:
NO'''
# n = input()
# if n.endswith('com') or n.endswith('ru'):
#     print('YES')
# else:
#     print('NO')

'''Самый частотный символ
На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется 
наиболее часто.
Формат входных данных 
На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского 
алфавита, а также цифры.
Формат выходных данных
Программа должна вывести символ, который появляется наиболее часто.
Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.
Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.
Sample Input 1:
aaaabbc
Sample Output 1:
a
Sample Input 2:
abaabbcccc
Sample Output 2:
c
'''
# n = input()
# str1 = 0
# str2 = 0
# for i in n:
#     if n.count(i) >= str1:
#         str1 = n.count(i)
#         str2 = i
# print(str2)
'''Первое и последнее вхождение
На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс.
 Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных 
 символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

Формат входных данных 
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Sample Input 1:

abcdefg
Sample Output 1:

5'''

# s = input()
# if s.count('f') == 1:
#     print(s.find('f'))
# elif s.count('f') >= 2:
#     print(s.find('f'), s.rfind('f'))
#
# else:
#     print('NO')
'''На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу, 
которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.
Формат входных данных 
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Sample Input 1:

ahahahahaha
Sample Output 1:

aa'''
# s = input()
# s = s[:s.find('h')] + s[s.rfind('h') + 1:]
# print(s)