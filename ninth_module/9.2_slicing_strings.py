'''Срезы строк
В предыдущем уроке мы научились работать с конкретными символами строки с помощью индексов []. Иногда нужно бывает
работать с целыми частями строки, в таком случае мы используем срезы (slices). Срезы похожи на комбинацию индексации
и функции range().

Рассмотрим строку s = 'abcdefghij'.

Положительные индексы	0	1	2	3	4	5	6	7	8	9
Строка	                a	b	c	d	e	f	g	h	i	j
Отрицательные индексы	-10	-9	-8	-7	-6	-5	-4	-3	-2	-1'''
'''С помощью среза мы можем получить несколько символов исходной строки, создав диапазон индексов разделенных двоеточием s[x:y].

Следующий программный код:'''
# s = 'abcdefghij'
# print(s[2:5])
# print(s[0:6])
# print(s[2:7])
#
'''
cde
abcdef
cdefg

При построении среза s[x:y] первое число – это то место, где начинается срез (включительно), а второе – это место, 
где заканчивается срез (невключительно). Разрезая строки, мы создаем подстроку, которая по сути является строкой 
внутри другой строки.

'''
'''Срез до конца, от начала
Если опустить второй параметр в срезе s[x:] (но поставить двоеточие), то срез берется до конца строки. Аналогично 
если опустить первый параметр s[:y], то можно взять срез от начала строки. Срез s[:] совпадает с самой строкой s.
Следующий программный код:'''
# print(s[2:])
# print(s[:7])
'''выводит:

cdefghij
abcdefg

Срез s[:] возвращает исходную строку.
'''

'''Отрицательные индексы в срезе
Мы также можем использовать отрицательные индексы для создания срезов. Как уже говорилось ранее, отрицательные индексы
 строки начинаются с -1 и отсчитываются до достижения начала строки. При использовании отрицательных индексов первый 
 параметр среза должен быть меньше второго, либо должен быть пропущен.

Следующий программный код:'''
# print(s[-9:-4])
# print(s[-3:])
# print(s[:-3])
# print(s[:-1])
'''bcdef
hij
abcdefg
Удалить из строки последний символ можно при помощи среза s[:-1]
'''
'''Шаг среза
Мы можем передать в срез третий необязательный параметр, который отвечает за шаг среза. К примеру, срез s[1:7:2]
 создаст строку bdf состоящую из каждого второго символа (индексы 1, 3, 5, правая граница не включена в срез).'''

'''Отрицательный шаг среза
Если в качестве шага среза указать отрицательное число, то символы будут идти в обратном порядке.

Следующий программный код:'''
# print(s[::-1])
# print(s[1:7:2])
# print(s[3::2])
# print(s[:7:3])
# print(s[::2])
# print(s[::-1])
# print(s[::-2])
'''Подводя итог
s = 'abcdefghij'
Программный код	Результат	Пояснение
s[2:5]	cde	строка состоящая из символов с индексами 2, 3, 4
s[:5]	abcde	первые пять символов строки
s[5:]	fghij	строка состоящая из символов с индексами от 5 до конца
s[-2:]	ij	последние два символа строки
s[:]	abcdefghij	вся строка целиком
s[1:7:2]	bdf	строка состоящая из каждого второго символа с индексами от 1 до 6
s[::-1]	jihgfedcba	строка в обратном порядке, так как шаг отрицательный'''

'''Изменение символа строки по индексу
Предположим, у нас есть строка s = 'abcdefghij' и мы хотим заменить символ с индексом 4 на 'X'. Можно попытаться 
написать код:

s[4] = 'X'
Однако такой код не работает. В Python строки являются неизменяемыми, то есть мы не можем менять их содержимое с 
помощью индексатора.

Если мы хотим поменять какой-либо символ строки s, мы должны создать новую строку. Следующий код использует срезы 
и решает поставленную задачу:

s = s[:4] + 'X' + s[5:]
Мы создаем два среза: от начала строки до 3 символа и с 5 символа по конец строки, а между ними вставляем нужный нам
 символ, который встанет на 4 позицию.

Примечания
Примечание 1. Синтаксис срезов строк очень похож на синтаксис функции range().

Примечание 2. Если первый параметр среза больше второго, то срез создает пустую строку.'''
# print( s[:4] + 'XXX' + s[5:])
# s = 'abcdefg'
# print(s[::-3])
'''Дополните приведенный код, используя срезы, так чтобы он вывел первые 12 символов строки s.'''
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[:12])
'''Дополните приведенный код, используя срезы, так чтобы он вывел последние 9 символов строки s'''
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[-9:])
'''Дополните приведенный код, используя срезы, так чтобы он вывел каждый 7 символ строки s начиная от начала строки.'''
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[::7])
'''Дополните приведенный код, используя срезы, так чтобы он вывел строку s в обратном порядке.'''
# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[::-1])
'''.sazzip owt rof nioctiB k01 diap enoemos ,0102 nI'''

'''Палиндром
На вход программе подается одно слово, записанное в нижнем регистре. Напишите программу, которая определяет является ли оно палиндромом.

Формат входных данных
На вход программе подается одно слово в нижнем регистре.
Формат выходных данных
Программа должна вывести «YES», если слово является палиндромом и «NO» в противном случае.
Примечание. Палиндром читается одинаково в обоих направлениях, например слово «потоп».'''
# s = input()
# if s[:] == s[::-1]:
#     print('YES')
# else:
#     print('NO')
'''Делаем срезы 1
На вход программе подается одна строка. Напишите программу, которая выводит:

общее количество символов в строке;
исходную строку повторенную 3 раза;
первый символ строки;
первые три символа строки;
последние три символа строки;
строку в обратном порядке;
строку с удаленным первым и последним символом.

Формат входных данных
На вход программе подается одна строка, длина которой больше 3 символов.
Формат выходных данных
Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.
Sample Input:
abcdefghijklmnopqrstuvwxyz'''
# s = input()
# countS = 0
# for i in s:
#     if s > '':
#         countS += 1
# print(countS)
# print(s*3)
# print(s[:1])
# print(s[:3])
# print(s[-3:])
# print(s[::-1])
# print(s[1:-1])
'''Делаем срезы 2
На вход программе подается одна строка. Напишите программу, которая выводит:

третий символ этой строки;
предпоследний символ этой строки;
первые пять символов этой строки;
всю строку, кроме последних двух символов;
все символы с четными индексами;
все символы с нечетными индексами;
все символы в обратном порядке;
все символы строки через один в обратном порядке, начиная с последнего.
Формат входных данных
На вход программе подается одна строка, длина которой больше 5 символов.

Формат выходных данных
Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.'''
# s = input()
# print(s[2])
# print(s[-2])
# print(s[:5])
# print(s[0:-2])
# count = 0
# for i in s:
#     count += 1
#     if count % 2 == 1:
#         print(i, end='')
# print(sep='')
# count = 0
# for i in s:
#     count += 1
#     if count % 2 == 0:
#         print(i, end='')
# print(sep='')
# print(s[::-1])
# print(s[len(s)::-2])
'''Две половинки
На вход программе подается строка текста. Напишите программу, которая разрежет ее на две равные части, переставит их 
местами и выведет на экран.
Формат входных данных
На вход программе подается строка текста.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Примечание. Если длина строки нечетная, то длина первой части должна быть на один символ больше.
Sample Input 1:
abcdef
Sample Output 1:
defabc'''
s = input()
i = (len(s) // 2 + len(s) % 2)
print(s[i:], s[:i], sep='')