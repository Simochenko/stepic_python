'''Вложенные циклы
Вложенный цикл расположен в еще одном цикле. Часы служат хорошим примером работы вложенного цикла. Секундная, минутная
 и часовая стрелки вращаются вокруг циферблата.Часовая стрелка смещается всего на 1 шаг для каждых 60 шагов минутной
  стрелки. И секундная стрелка должна сделать 60 шагов для 1 шага минутной стрелки. Это означает, что для каждого
  полного оборота часовой стрелки (12 шагов), минутная стрелка делает 720 шагов.'''
'''Рассмотрим цикл, который частично моделирует электронные часы. Он показывает секунды от 0 до 59:'''
# for seconds in range(60):
#     print(seconds)
'''Можно добавить переменную minutes и вложить цикл написанный выше внутрь еще одного цикла, который повторяется
 60 раз:'''
# for minutes in range(60):
#     for seconds in range(60):
#         print(minutes, ':', seconds)
#
'''Для того, чтобы сделать модель законченной, можно добавить еще одну переменную для подсчета часов:'''
# for hours in range(24):
#     for minutes in range(60):
#         for seconds in range(60):
#             print(hours, ':', minutes, ':', seconds)
'''Самый внутренний цикл сделает 60 итераций для каждой итерации среднего цикла. Средний цикл сделает 60 итераций для 
каждой итерации самого внешнего цикла. Когда самый внешний цикл сделает 24 итерации,
 средний сделает 24⋅60=1440 итераций, и самый внутренний цикл сделает 24⋅60⋅60=86400 итераций!

Пример имитационной модели часов подводит нас к нескольким моментам, имеющим отношение к вложенным циклам:

вложенный цикл выполняет все свои итерации для каждой отдельной итерации внешнего цикла;
вложенные циклы завершают свои итерации быстрее, чем внешние циклы;
для того, чтобы получить общее количество итераций вложенного цикла, надо перемножить количество итераций всех циклов.
    Мы можем вкладывать друг в друга циклы как for, так и while.'''

'''Оператор break выполняет прерывание ближайшего цикла в котором он расположен. Аналогично, оператор continue 
осуществляет переход на следующую итерацию ближайшего цикла.

Рассмотрим программный код:

for i in range(3):
    for j in range(3):
        print(i, j)
Результатом его выполнения будут 9 строк:

0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2
Изменим код, добавив во вложенный цикл условный оператор с оператором break:

for i in range(3):
    for j in range(3):
        if i == j:
            break
        print(i, j)
Результатом выполнения нового кода будут 3 строки:

1 0
2 0
2 1
Изменим оператор прерывания break на оператор continue:

for i in range(3):
    for j in range(3):
        if i == j:
            continue
        print(i, j)
Результатом выполнения нового кода будут 6 строк:

0 1
0 2
1 0
1 2
2 0
2 1'''

'''Для того чтобы завершить весь вывод таблицы звездочек, нам нужно выполнить этот цикл восемь раз. Мы можем поместить 
этот цикл в еще один цикл, который делает восемь итераций, как показано ниже:
'''
# for i in range(8):
#     for j in range(6):
#         print('*', end='')
#     print()
'''Внешний цикл делает восемь итераций. Во время каждой итерации этого цикла внутренний цикл делает 6 итераций. 
(Обратите внимание, что в строке 4 после того, как все строки были напечатаны, мы вызываем функцию print().
 Мы должны это сделать, чтобы в конце каждой строки продвинуть экранный курсор на следующую строку. Без этой 
 инструкции все звездочки
будут напечатаны на экране в виде одной длинной строки.)
Давайте рассмотрим еще один пример. Предположим, что вы хотите напечатать звездочки в комбинации, которая похожа на 
приведенный ниже звездный треугольник:'''
'''Представим эту комбинацию звездочек, как сочетание строк и столбцов. В этой комбинации всего восемь строк. 
В первой строке один столбец. Во второй строке – два столбца. В третьей строке – три. И так продолжается до восьмой
 строки, в которой восемь столбцов.'''
# for i in range(8):
#     for j in range(i + 1):
#         print('*', end='')
#     print()
# for i in range(1, 4):
#     for j in range(3, 5):
#         print(i + j, end='')

# counter = 0
# for i in range(99, 102):
#     temp = i
#     while temp > 0:
#         counter += 1
#         temp //= 10
# print(counter)
''' 8 '''
'''Дано натуральное число n (n≤ 9). Напишите программу, которая печатает таблицу размером n ×3 состоящую из 
данного числа (числа отделены одним пробелом).
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести таблицу размером n×3 состоящую из данного числа.
Примечание. В конце строки может быть пробел.'''

# n = int(input())
# for i in range(n):
#     for j in range(3):
#         print(n, end=' ')
#     print()
'''Таблица-2
Дано натуральное число n (n≤ 9). Напишите программу, которая печатает таблицу размером n×5, где в ii-ой 
строке указано число i (числа отделены одним пробелом).
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести таблицу размером n ×5 в соответствии с условием.
Примечание. В конце строки может быть пробел.'''
# n = int(input())
# for i in range(n):
#     for j in range(5):
#         print(i + 1, end=' ')
#     print()
'''Дано натуральное число n (n≤ 9). Напишите программу, которая печатает таблицу сложения для всех 
чисел от 1 до n в соответствии с примером.
Формат входных данных
На вход программе подается одно натуральное число.
Формат выходных данных
Программа должна вывести таблицу сложения для всех чисел от 1 до n.
Примечание. В конце строки может быть пробел.'''
# n = int(input())
# for i in range(n):
#     for j in range(1, 10):
#         print(i+1, '+', j, '=', (i+1)+(j))
#     print()
n = int(input())
for i in range(n-2):
    for j in range(i + 1):
        print('*', end='')
    print()
for i in range(n-1):
    for j in range((n-1) - i):
        print('*', end='')
    print()