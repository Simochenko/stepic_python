'''Тема урока: функции с возвратом значения
Функции с возвратом нескольких значений
Решение задач
Аннотация. Урок посвящен функциям с возвратом нескольких значений.

Функции с возвратом нескольких значений
В Python функции не ограничены возвратом всего одного значения. После инструкции return можно определить много
выражений, разделенных запятыми:

return выражение 1, выражение 2, выражение 3 ...
Следующий программный код определяет функцию get_powers(num), которая принимает в качестве аргумента число num и
возвращает его квадрат, куб и четвертую степень.

def get_powers(num):
    return num**2, num**3, num**4
Результатом выполнения следующего кода:

a, b, c = get_powers(2)
print(a)
print(b)
print(c)
будет:

4
8
16
Возвращающие несколько значений функции – исключительная особенность языка Python. В большинстве языков
программирования для возврата нескольких значений используется результирующий тип данных – список, который
 может содержать несколько значений.

Рассмотрим еще один пример. Пусть требуется написать функцию, которая находит точку пересечения двух непараллельных
 прямых ax+by=eax+by=e и cx+dy = fcx+dy=f. Другими словами требуется решить систему уравнений:

\begin{cases} ax+by=e\\ cx+dy = f \end{cases}
{
ax+by=e
cx+dy=f
​

Несложно прийти к решению этой системы:

\begin{cases} ax+by=e\\[5pt] cx+dy = f \end{cases} \iff \begin{cases} x = \dfrac{d\cdot e-b \cdot f}{a \cdot d - b
\cdot c}\\[10pt] y = \dfrac{a\cdot f-c \cdot e}{a \cdot d - b \cdot c} \end{cases}
⎩
⎨
⎧
​

ax+by=e
cx+dy=f
​
 ⟺
⎩
⎨
⎧
​

x=
a⋅d−b⋅c
d⋅e−b⋅f
​

y=
a⋅d−b⋅c
a⋅f−c⋅e
​

​

Программный код, решающий задачу, имеет вид:

def solve(a, b, c, d, e, f):
    x = (d * e - b * f)/(a * d - b * c)
    y = (a * f - c * e)/(a * d - b * c)
    return x, y
Следующий код:

xsol, ysol = solve(2, 3, 4, 1, 2, 5)
print('Решением системы являются числа', 'x =', xsol, 'y =', ysol)
выведет

Решением системы являются числа x = 1.3 y = -0.2
'''
# from math import sqrt
# def distance(x1, y1, x2, y2):
#     return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
# x1 = float(input())
# x2 = float(input())
# y1 = float(input())
# y2 = float(input())
# #print(distance(x1, x2, y1, y2))
# print(distance(x1, x2, y1, y2))
import math

'''Площадь и длина
Напишите функцию get_circle(radius), которая принимает в качестве аргумента радиус окружности и возвращает два 
значения: длину окружности и площадь круга, ограниченного данной окружностью.

Примечание 1. Длина окружности и площадь круга радиуса rr вычисляются по формулам:

С = 2 \pi r, \, \, \, S = \pi r^2.
С=2πr,S=πr 
2
 .
Примечание 2. Для числа \piπ используйте глобальную константу из модуля math.

Примечание 3. Следующий программный код:

print(get_circle(1))
print(get_circle(1.5))
должен выводить:

6.283185307179586 3.141592653589793
9.42477796076938 7.0685834705770345'''


# def circle_length(radius):
#     p = 3.14159
#     c = radius * p * 2
#     return c
#
#
# def circle_area(radius):
#     p = 3.14159
#     a = p * radius ** 2
#     return a
# radius = float(input())
# print(circle_length(radius), circle_area(radius))
# объявление функции

# from math import pi
#
#
# def get_circle(radius):
#     c = radius * pi * 2
#     a = pi * radius ** 2
#     return a, c
#
#
# # считываем данные
# r = float(input())
#
# # вызываем функцию
# length, square = get_circle(r)
# print(square, length)

# from math import *
# # объявление функции
#
#
# def solve(a, b, c):
#     D = (b ** 2) - (4 * a * c)
#     x1 = ((-b - sqrt(D))/(2 * a))
#     x2 = ((-b + sqrt(D))/(2 * a))
#     return min(x1, x2), max(x1, x2)
#
#
# a, b, c = int(input()), int(input()), int(input())
#
# # вызываем функцию
# x1, x2 = solve(a, b, c)
# print(x1, x2)

'''Середина отрезка
Напишите функцию get_middle_point(x1, y1, x2, y2), которая принимает в качестве аргументов координаты концов отрезка 
(x_1; y_1) (x_2; y_2)
 и возвращает координаты точки являющейся серединой данного отрезка.

Примечание 1. Координаты середины отрезка вычисляются по формуле:



Примечание 2. Следующий программный код:

print(get_middle_point(0, 0, 10, 0))
print(get_middle_point(1, 5, 8, 3))
должен выводить:

5.0 0.0
4.5 4.0'''


# # объявление функции
# def get_middle_point(x1, y1, x2, y2):
#     x = ((x2 + x1) / 2)
#     y = ((y2 + y1) / 2)
#     return x, y
#
#
# # считываем данные
# x_1, y_1 = int(input()), int(input())
# x_2, y_2 = int(input()), int(input())
#
# # вызываем функцию
#
# x, y = get_middle_point(x_1, y_1, x_2, y_2)
# print(x, y)
