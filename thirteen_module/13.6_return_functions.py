'''–¢–µ–º–∞ —É—Ä–æ–∫–∞: —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è
–§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è. –£—Ä–æ–∫ –ø–æ—Å–≤—è—â–µ–Ω —Ñ—É–Ω–∫—Ü–∏—è–º —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

–§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
–í Python —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤—Å–µ–≥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ return –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–Ω–æ–≥–æ
–≤—ã—Ä–∞–∂–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏:

return –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 1, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 2, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 3 ...
–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_powers(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ num –∏
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç, –∫—É–± –∏ —á–µ—Ç–≤–µ—Ä—Ç—É—é —Å—Ç–µ–ø–µ–Ω—å.

def get_powers(num):
    return num**2, num**3, num**4
–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞:

a, b, c = get_powers(2)
print(a)
print(b)
print(c)
–±—É–¥–µ—Ç:

4
8
16
–í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äì –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞ Python. –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —è–∑—ã–∫–æ–≤
–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äì —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π
 –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π.

–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—â–µ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä. –ü—É—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–≤—É—Ö –Ω–µ–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö
 –ø—Ä—è–º—ã—Ö ax+by=eax+by=e –∏ cx+dy = fcx+dy=f. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π:

\begin{cases} ax+by=e\\ cx+dy = f \end{cases}
{
ax+by=e
cx+dy=f
‚Äã

–ù–µ—Å–ª–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã:

\begin{cases} ax+by=e\\[5pt] cx+dy = f \end{cases} \iff \begin{cases} x = \dfrac{d\cdot e-b \cdot f}{a \cdot d - b
\cdot c}\\[10pt] y = \dfrac{a\cdot f-c \cdot e}{a \cdot d - b \cdot c} \end{cases}
‚é©
‚é®
‚éß
‚Äã

ax+by=e
cx+dy=f
‚Äã
 ‚ü∫
‚é©
‚é®
‚éß
‚Äã

x=
a‚ãÖd‚àíb‚ãÖc
d‚ãÖe‚àíb‚ãÖf
‚Äã

y=
a‚ãÖd‚àíb‚ãÖc
a‚ãÖf‚àíc‚ãÖe
‚Äã

‚Äã

–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥, —Ä–µ—à–∞—é—â–∏–π –∑–∞–¥–∞—á—É, –∏–º–µ–µ—Ç –≤–∏–¥:

def solve(a, b, c, d, e, f):
    x = (d * e - b * f)/(a * d - b * c)
    y = (a * f - c * e)/(a * d - b * c)
    return x, y
–°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

xsol, ysol = solve(2, 3, 4, 1, 2, 5)
print('–†–µ—à–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞', 'x =', xsol, 'y =', ysol)
–≤—ã–≤–µ–¥–µ—Ç

–†–µ—à–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞ x = 1.3 y = -0.2
'''
# from math import sqrt
# def distance(x1, y1, x2, y2):
#     return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
# x1 = float(input())
# x2 = float(input())
# y1 = float(input())
# y2 = float(input())
# #print(distance(x1, x2, y1, y2))
# print(distance(x1, x2, y1, y2))


'''–ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_circle(radius), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ 
–∑–Ω–∞—á–µ–Ω–∏—è: –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–∞ rr –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º:

–° = 2 \pi r, \, \, \, S = \pi r^2.
–°=2œÄr,S=œÄr 
2
 .
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —á–∏—Å–ª–∞ \piœÄ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ –º–æ–¥—É–ª—è math.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_circle(1))
print(get_circle(1.5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

6.283185307179586 3.141592653589793
9.42477796076938 7.0685834705770345'''


# def circle_length(radius):
#     p = 3.14159
#     c = radius * p * 2
#     return c
#
#
# def circle_area(radius):
#     p = 3.14159
#     a = p * radius ** 2
#     return a
# radius = float(input())
# print(circle_length(radius), circle_area(radius))
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

# from math import pi
#
#
# def get_circle(radius):
#     c = radius * pi * 2
#     a = pi * radius ** 2
#     return a, c
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# r = float(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# length, square = get_circle(r)
# print(square, length)

# from math import *
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
#
#
# def solve(a, b, c):
#     D = (b ** 2) - (4 * a * c)
#     x1 = ((-b - sqrt(D))/(2 * a))
#     x2 = ((-b + sqrt(D))/(2 * a))
#     return min(x1, x2), max(x1, x2)
#
#
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# x1, x2 = solve(a, b, c)
# print(x1, x2)

'''–°–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_middle_point(x1, y1, x2, y2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–æ–≤ –æ—Ç—Ä–µ–∑–∫–∞ 
(x_1; y_1) (x_2; y_2)
 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ —è–≤–ª—è—é—â–µ–π—Å—è —Å–µ—Ä–µ–¥–∏–Ω–æ–π –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–∞ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:



–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_middle_point(0, 0, 10, 0))
print(get_middle_point(1, 5, 8, 3))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

5.0 0.0
4.5 4.0'''


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_middle_point(x1, y1, x2, y2):
#     x = ((x2 + x1) / 2)
#     y = ((y2 + y1) / 2)
#     return x, y
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# x_1, y_1 = int(input()), int(input())
# x_2, y_2 = int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#
# x, y = get_middle_point(x_1, y_1, x_2, y_2)
# print(x, y)
# def do_something():
#   a = 1
#   print(a)
#
# a = 0
# do_something()
# print(a)
# def do_something():
#   a = 1
#
# do_something()
# print(a)
a = 1

# def do_something():
#   print(a)
#
# do_something()
#

'''–ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã—Å–æ—Ç–æ–π 
—Ä–∞–≤–Ω—ã–º–∏ 15 –∏ 8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:

       *
      ***
     *****
    *******
   *********
  ***********
 *************
***************
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1 . –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for. 

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2 . –°–ø—Ä–∞–≤–∞ –æ—Ç –∑–≤–µ–∑–¥–æ—á–µ–∫ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç.'''


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def draw_triangle():
#     for i in range(8):  # —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ - —ç—Ç–æ –≤—ã—Å–æ—Ç–∞ –ø–æ—É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏
#         print(' ' * (8 - 1 - i) + '*' * (1 + i * 2))
#
# # –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# draw_triangle()  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

'''–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ 10001000 —Ä—É–±–ª–µ–π –∑–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏ 120120 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_shipping_cost(quantity), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ quantity ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_shipping_cost(1))
print(get_shipping_cost(3))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

1000
1240'''


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_shipping_cost(quantity):
#     s = 1000 + ( quantity - 1 ) * 120
#     return s
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_shipping_cost(n))

'''–ò—Å–∫–æ–º—ã–π –º–µ—Å—è—Ü
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_month(language, number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ language ‚Äì —è–∑—ã–∫ ru –∏–ª–∏ en –∏
 number ‚Äì –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 12) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_month('ru', 1))
print(get_month('ru', 12))
print(get_month('en', 1))
print(get_month('en', 10))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

—è–Ω–≤–∞—Ä—å
–¥–µ–∫–∞–±—Ä—å
january
october'''

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_month(language, number):
#     ru = (((['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'])))
#     en = (((['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'])))
#     if language == 'en':
#         return en[number-1]
#     return ru[number-1]
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# lan = input()
# num = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_month(lan, num))

'''–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_binom(n, k), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ k –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
–∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞, —Ä–∞–≤–Ω–æ–≥–æ \dfrac{n!}{k! (n-k)!} 
k!(n‚àík)!
n!
‚Äã	
 .

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ nn, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n, —Ç–æ –µ—Å—Ç—å 

n!=1‚ãÖ2‚ãÖ3‚ãÖ‚Ä¶‚ãÖn

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –≤—ã—á–∏—Å–ª—è—é—â—É—é —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–∂–µ 
–≥–æ—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑ –º–æ–¥—É–ª—è math.

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ stdin ‚Üí stdout'''
#
# import math
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def compute_binom(n, k):
#     b = (math.factorial(n))/((math.factorial(k))*(math.factorial(n-k)))
#     return int(b)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
# k = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(compute_binom(n, k))

'''–ß–∏—Å–ª–æ —Å–ª–æ–≤–∞–º–∏ üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_to_words(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ
 —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ —á–∏—Å–ª–æ 1 \le num \le 991‚â§num ‚â§99.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(number_to_words(7))
print(number_to_words(85))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

—Å–µ–º—å
–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç –ø—è—Ç—å
'''
#
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_to_words(num):
#
#     f = {1: '–æ–¥–∏–Ω', 2: '–¥–≤–∞', 3: '—Ç—Ä–∏', 4: '—á–µ—Ç—ã—Ä–µ', 5: '–ø—è—Ç—å',
#          6: '—à–µ—Å—Ç—å', 7: '—Å–µ–º—å', 8: '–≤–æ—Å–µ–º—å', 9: '–¥–µ–≤—è—Ç—å'}
#     o = {10: '–¥–µ—Å—è—Ç—å', 20: '–¥–≤–∞–¥—Ü–∞—Ç—å', 30: '—Ç—Ä–∏–¥—Ü–∞—Ç—å', 40: '—Å–æ—Ä–æ–∫',
#          50: '–ø—è—Ç—å–¥–µ—Å—è—Ç', 60: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', 70: '—Å–µ–º—å–¥–µ—Å—è—Ç',
#          80: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', 90: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'}
#     s = {11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å',
#          14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', 15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',
#          17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', 19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'}
#     n1 = num % 10
#     n2 = num - n1
#     if num < 10:
#         return f.get(num)
#     elif 10 < num < 20:
#         return s.get(num)
#     elif num >= 10 and num in o:
#         return o.get(num)
#     else:
#         return o.get(n2) + ' ' + f.get(n1)
#
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(number_to_words(n))

'''–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã
–ú–∞–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ ‚Äì —ç—Ç–æ –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–µ–Ω—å, —É–º–Ω–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –º–µ—Å—è—Ü, —Ä–∞–≤–µ–Ω —á–∏—Å–ª—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ –≥–æ–¥–∞.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_magic(date) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–æ–π –¥–∞—Ç—ã –∏
 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_magic('10.06.1960'))
print(is_magic('11.06.1960'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False'''
#
# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_magic(date:str):
#     return int(date[0:2]) * int(date[3:5]) == int(date[8:10])
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# date = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_magic(date))

'''–ü–∞–Ω–≥—Ä–∞–º–º—ã
–ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. –û–±—ã—á–Ω–æ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, 
—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_pangram(text) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ 
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_pangram('Jackdaws love my big sphinx of quartz'))
print(is_pangram('The jay pig fox zebra and my wolves quack'))
print(is_pangram('Hello world'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
True
False'''

import string
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_pangram(text):
    text = text.lower()
    text_list_old = sorted([c for c in text if c != ' '])
    text_list = []
    for c in text_list_old:
        if c not in text_list:
            text_list.append(c)
    if text_list == list(string.ascii_lowercase): return True
    else: return False

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
text = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(is_pangram(text))