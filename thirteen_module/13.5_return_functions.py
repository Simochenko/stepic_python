'''–¢–µ–º–∞ —É—Ä–æ–∫–∞: —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è
–§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è
–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è. –ö—Ä–æ–º–µ —Ñ—É–Ω–∫—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ, —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏ –¥—Ä—É–≥–∏–µ
 –∑–Ω–∞—á–µ–Ω–∏—è.

–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
Python –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å –±—É–ª–µ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –ª–∏–±–æ –∏—Å—Ç–∏–Ω—É (True), –ª–∏–±–æ –ª–æ–∂—å (False). –ë—É–ª–µ–≤—É —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ
–ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è, —Ç–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è True –∏ False –±—É–¥—É—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.

–ë—É–ª–µ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ä–æ–∫–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∏
—Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º.
–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ—Ç–Ω–æ–µ –æ–Ω–æ –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ.

–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:

number = int(input())
if number % 2 == 0:
    print('–≠—Ç–æ —á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ. ')
else:
    print('–≠—Ç–æ —á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ.')
–≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –±—É–ª–µ–≤—É —Ñ—É–Ω–∫—Ü–∏—é is_even(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–Ω–æ —á–µ—Ç–Ω–æ–µ, –∏ False –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ.

def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False
–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é if-else –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
number –≤—ã–∑—ã–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é is_even():

number = int(input())
if is_even(number):
    print('–≠—Ç–æ —á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ. ')
else:
    print('–≠—Ç–æ —á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ.')
–¢–∞–∫ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å, –∞ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
—á–µ—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ë—É–ª–µ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ,
–ø—Ä–µ–¥–ª–∞–≥–∞—é—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–∑–¥–µ–ª–∏—è, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è 100, 200 –∏ 300, –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å
—Ç–∞–∫–æ–π –∫–æ–¥:

model = int(input())

while model != 100 and model != 200 and model != 300:
    —Ärint('–î–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π —è–≤–ª—è—é—Ç—Å—è 100, 200 –∏ 300.')
    model = int(input())
–¶–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–µ –±—É–ª–µ–≤–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞model –Ω–µ –±—É–¥–µ—Ç
—Ä–∞–≤–Ω—è—Ç—å—Å—è 100 –∏ 200 –∏–ª–∏ 300.

–í–º–µ—Å—Ç–µ —Å —Ç–µ–º, —Ü–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –±—É–ª–µ–≤—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π model, –∏ –≤—ã–∑—ã–≤–∞—è –µ–µ –≤ —Ü–∏–∫–ª–µ.
 –ù–∞–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é is_invalid(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä model –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å
 –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ. –¢–æ–≥–¥–∞ —Ü–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

while is_invalid(model):
    print('–î–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –º–æ–¥–µ–ª–µ–π —è–≤–ª—è—é—Ç—Å—è 100, 200 –∏ 300.')
    model = int(input())
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–∏–∫–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥—á–µ —á–∏—Ç–∞—Ç—å. –¢–µ–ø–µ—Ä—å –≤–ø–æ–ª–Ω–µ –æ—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞
–Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é is_invalid().
–û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –∏ –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —Ä–∞–≤–µ–Ω 100, 200 –∏ 300, —Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –≥–æ–≤–æ—Ä—è, —á—Ç–æ –æ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.

def is_invalid(model):
    if model != 100 and model != 200 and model != 300:
        return True
    else:
        return False
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, —Ä–µ–∞–ª–∏–∑—É—é—â–∏—Ö —Ç–∞–∫—É—é –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É ‚Äî –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–¥–∞
–∏ –≤–µ–¥–µ—Ç –∫ –∑–∞—Ç—Ä–∞—Ç–∞–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —á—Ç–æ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ø—Ä–æ–≥—Ä–∞–º–º—ã.'''

'''Is Valid Triangle?
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞,
 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3 –∏ False –≤ 
 –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –° –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —É–∂–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª–∏—Å—å –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_valid_triangle(2, 2, 2))
print(is_valid_triangle(2, 3, 10))
print(is_valid_triangle(3, 4, 5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False
True'''

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_valid_triangle(side1, side2, side3):
#     if (side1 < side2 + side3) and (side2 < side1 + side3) and (side3 < side2 + side1):
#         return True
#
#     else:
#         return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_valid_triangle(a, b, c))


'''Is a Number Prime? üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 
True –µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(is_prime(1))
print(is_prime(10))
print(is_prime(17))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
False
False
True'''

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_prime(num):
#     flag = True
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             flag = False
#     if num > 1 and flag == True:
#         return True
#     else:
#         return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_prime(n))

'''Next Prime üå∂Ô∏èüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_next_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime() –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.

 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(get_next_prime(6))
print(get_next_prime(7))
print(get_next_prime(14))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

7
11
17'''

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_next_prime(num):
#     flag = True
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             flag = False
#     if num > 1 and flag == True:
#         return True
#     else:
#         return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
#
#
# while not get_next_prime(n + 1):
#     n += 1
#     continue
# print((n+1))

'''Good password üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 
password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –µ—Å–ª–∏:

–µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤; 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä); 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.
 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_password_good('aabbCC11OP'))
print(is_password_good('abC1pu'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False'''

# def is_password_good(password):
#     total = 0
#     if len(password) > 8:
#         total += 1
#     if password.isalnum():
#         total += 1
#     for i in password:
#         if i.islower():
#             total += 1
#             break
#
#     for i in password:
#         if i.isupper():
#             total += 1
#             break
#
#     if total >= 4:
#         return True
#     elif total < 4:
#         return False
#
#
# txt = input()
# print(is_password_good(txt))
#
#
# def is_password_good(password):
#     upp = [i for i in password if i.isupper()]
#     low = [i for i in password if i.islower()]
#     dig = [i for i in password if i.isdigit()]
#     return all([len(password) >= 8, upp, low, dig])
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_password_good(txt))

'''–†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ word1 –∏ word2 –∏ 
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ 1 —Å–∏–º–≤–æ–ª–µ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_one_away('bike', 'hike'))
print(is_one_away('water', 'wafer'))
print(is_one_away('abcd', 'abpo'))
print(is_one_away('abcd', 'abcde'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
True
False
False
Sample Input:

bike
hike
Sample Output:

True'''

# def is_one_away(word1, word2):
#     for i in word1:
#         if i  in word2 :
#             word2 = word2.replace(i, '', 1)
#             word1 = word1.replace(i, '', 1)
#     m2 = len(word2)
#     m1 = len(word1)
#     return m1 == m2 == 1
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt1 = input()
# txt2 = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_one_away(txt1, txt2))

'''–ü–∞–ª–∏–Ω–¥—Ä–æ–º üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 
True –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–∞–ª–∏–Ω–¥—Ä–æ–º ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, –∞ —Ç–∞–∫–∂–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã, –∞ —Ç–∞–∫–∂–µ
 —Å–∏–º–≤–æ–ª—ã , . ! ? -.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_palindrome('–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞.'))
print(is_palindrome('Gabler Ruby - burrel bag!'))
print(is_palindrome('BEEGEEK'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
True
False'''

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_palindrome(text):
#     text = [i.lower() for i in text if i not in (',.!?- ')]
#     return text == text[::-1]
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_palindrome(txt))

'''BEEGEEK
BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.

–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK
 —Ñ–∞–Ω–∞—Ç–µ–µ—Ç –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ –æ–Ω —Ä–µ—à–∏–ª:

—á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
—á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
—á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 
password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º BEEGEEK –±–∞–Ω–∫–∞ –∏ False –≤ 
–ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

 –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_valid_password('1221:101:22'))
print(is_valid_password('565:30:50'))
print(is_valid_password('112:7:9'))
print(is_valid_password('1221:101:22:22'))

–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False
False
False'''

# def isPrime(n):
#     if n % 2 == 0: return(n == 2)
#     d = 3
#     while d * d <= n and n % d != 0: d += 2
#     return(d * d > n)
#
# def isPalindrom(n):
#     n = str(n)
#     return(n == n[::-1])
#
# def isEven(n): return(not n % 2)
#
# def is_valid_password(password):
#     try:
#         a, b, c = map(int, password.split(':'))
#         return(isPalindrom(a) and isPrime(b) and isEven(c))
#     except: return(False)
#
# psw = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_valid_password(psw))

'''–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é 
–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π 
–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ), 
–≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥–µ—Ç—Å—è –ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(is_correct_bracket('()(()())'))
print(is_correct_bracket(')(())('))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

True
False'''


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_correct_bracket(text):
#     while '()' in text:
#         text = text.replace('()', '')
#
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ text —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
#     return not text
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_correct_bracket(txt))

'''–ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º 
—Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å—Ç–∏–ª—è—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ —Ç—É—Ç.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:

print(convert_to_python_case('ThisIsCamelCased'))
print(convert_to_python_case('IsPrimeNumber'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:

this_is_camel_cased
is_prime_number'''
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def convert_to_python_case(text, sep='_'):
    snake_register = ''
    for i in text:
        if i.isupper():
            snake_register += sep + i.lower()
        else:
            snake_register += i
    return snake_register.lstrip(sep)

# —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
txt = input()

# –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
print(convert_to_python_case(txt))